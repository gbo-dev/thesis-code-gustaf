% 
% cptasks - A MATLAB(R) implementation of schedulability tests for
% conditional and parallel tasks
%
% Copyright (C) 2014-2015  
% ReTiS Lab - Scuola Superiore Sant'Anna - Pisa (Italy)
%
% cptasks is free software; you can redistribute it
% and/or modify it under the terms of the GNU General Public License
% version 2 as published by the Free Software Foundation, 
% (with a special exception described below).
%
% Linking this code statically or dynamically with other modules is
% making a combined work based on this code.  Thus, the terms and
% conditions of the GNU General Public License cover the whole
% combination.
%
% cptasks is distributed in the hope that it will be
% useful, but WITHOUT ANY WARRANTY; without even the implied warranty
% of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License version 2 for more details.
%
% You should have received a copy of the GNU General Public License
% version 2 along with cptasks; if not, write to the
% Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
% Boston, MA 02110-1301 USA.
%
%
% Author: 2015 Alessandra Melani (Modified by Gustaf Bodin)

function dag = generateSchedParams(i, beta, m, f, U)
    % Attempts to create an unbalanced DAG from a DAG generated by Melani's function
    % Also has another way of computing the deadline
    
    global task;
    dag = task(i);

    [dag.cmaxs, dag.lengths, dag.paths] = getAllPaths(dag.v);
    dag = imbalanceDAG(dag, 0.5);
    [dag.cmaxs, dag.lengths, dag.paths] = getAllPaths(dag.v);

    dag.W = computeVolume(dag.v); % dag.wcw same thing as no cond paths, but to make sure
    %Tmin = dag.len; % NOTE: Ensure OK when used
    %Tmax = dag.W / beta;
    
    %int1 = Tmin;
    %int2 = Tmax;
    %dag.T = randi([int1, int2]);

    dag.T = dag.wcw / U;

    % NOTE: IMPLICIT DEADLINES CURRENTLY
    dag.D = dag.T;

    dag.maxWCET = findMaxWCET(dag);
    dag.Wfmax = dag.W + dag.maxWCET * f;
    [dag.Lfmax, ~] = longestFaultyPath(dag, f);

    %LowerBoundOnValidDeadline = max(dag.Wfmax/m, dag.Lfmax);
    %dag.D = LowerBoundOnValidDeadline * 1.1; 

end
